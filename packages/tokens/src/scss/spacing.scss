@use './helpers';
@use './responsive';

$space-none: 0;
$space-xxs: 4px;
$space-xs: 8px;
$space-s: 12px;
$space-m: 16px;
$space-l: 24px;
$space-xl: 32px;
$space-xxl: 52px;
$space-xxxl: 84px;
$spaces: (
  none: $space-none,
  xxs: $space-xxs,
  xs: $space-xs,
  s: $space-s,
  m: $space-m,
  l: $space-l,
  xl: $space-xl,
  xxl: $space-xxl,
  xxxl: $space-xxxl,
);

@mixin padding($size, $hSize: null) {
  @if map-has-key($spaces, $size) {
    $size: map-get($spaces, $size);
  }

  @if map-has-key($spaces, $hSize) {
    $hSize: map-get($spaces, $hSize);
  }

  @if $hSize {
    padding: $size $hSize;
  } @else {
    padding: $size;
  }
}

@mixin margin($size, $hSize: null) {
  @if map-has-key($spaces, $size) {
    $size: map-get($spaces, $size);
  }

  @if map-has-key($spaces, $hSize) {
    $hSize: map-get($spaces, $hSize);
  }

  @if $hSize {
    margin: $size $hSize;
  } @else {
    margin: $size;
  }
}

@mixin auto-spacing(
  $breakpoints: (
    mobile: (xs, s),
    laptop: (s, m),
    desktop: (m, l),
    desktop-large: (l, xl),
  ),
  $rule: padding,
) {
  @each $key, $value in $breakpoints {
    @if type-of($value) == list {
      @each $k in $value {
        @if map-has-key($spaces, $k) {
          $value: set-nth($value, index($value, $k), map-get($spaces, $k));
        }
      }

      $value: join($value);
    } @else if map-has-key($spaces, $value) {
      $value: map-get($spaces, $value);
    }

    @if $key == mobile {
      @include responsive.media(laptop, false) {
        @include helpers.rule($rule, $value);
      }
    } @else {
      @include responsive.media($key) {
        @include helpers.rule($rule, $value);
      }
    }
  }
}
