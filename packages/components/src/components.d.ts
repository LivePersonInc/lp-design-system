/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Theme } from "./utils/types";
import { ButtonSize, ButtonVariant } from "./components/button/button";
import { ButtonGroupSize } from "./components/button-group/button-group";
import { CheckboxLabelPositions } from "./components/checkbox/checkbox";
import { ChipSize } from "./components/multiselect-chip/chip";
import { DropdownContentPlacements } from "./components/dropdown/dropdown";
import { FileInputSizes } from "./components/file-input/file-input";
import { ChipSize as ChipSize1 } from "./components/multiselect-chip/chip";
import { NumberInputSizes, NumberInputTextAligners } from "./components/number-input/number-input";
import { RadioLabelPositions, RadioSizes } from "./components/radio/Radio";
import { RadioLabelPositions as RadioLabelPositions1, RadioSizes as RadioSizes1 } from "./components/radio/Radio";
import { TextInputSizes, TextInputTextAligners } from "./components/text-input/text-input";
import { TextareaTextAligners } from "./components/textarea/textarea";
import { ToggleLabelPositions } from "./components/toggle/toggle";
import { ToggleButtonSize } from "./components/toggle-button/toggle-button";
export namespace Components {
    interface LpButton {
        /**
          * Can be provided as a child element
         */
        "label": string;
        "size": ButtonSize;
        "theme": Theme;
        "variant": ButtonVariant;
    }
    interface LpButtonGroup {
        "size"?: ButtonGroupSize;
        "theme"?: Theme;
    }
    interface LpCheckbox {
        "checked": boolean;
        "error": boolean;
        "indeterminate": boolean;
        /**
          * Can be provided as a child element
         */
        "label": string;
        "labelPosition": CheckboxLabelPositions;
        "theme": Theme;
    }
    interface LpChip {
        /**
          * Can be provided as a child
         */
        "label": string | number;
        "size": ChipSize;
        "theme": Theme;
        "value": string;
    }
    interface LpDropdown {
        "closeOnBlur": boolean;
        "closeOnContentClick": boolean;
        "closeOnEscape": boolean;
        "contentPlacement": DropdownContentPlacements;
        "dropdownClose": () => Promise<void>;
        "dropdownOpen": () => Promise<void>;
        "open": boolean;
        "parentOffset": string | number;
        "parentSelector": string;
    }
    interface LpFileInput {
        /**
          * Can be provided as a child element
         */
        "buttonLabel": string;
        "disabled": boolean;
        "error": boolean;
        "multiple": boolean;
        "readonly": boolean;
        "size": FileInputSizes;
        "theme": Theme;
        "uploading": boolean;
        /**
          * Can be provided as a child element
         */
        "uploadingButtonLabel": string;
        "uploadingProgress": string | number;
    }
    interface LpInputHelper {
        "disabled"?: boolean;
        "error"?: boolean;
        /**
          * Can be provided as a child element
         */
        "text"?: string;
        "theme"?: Theme;
    }
    interface LpInputLabel {
        "info"?: string;
        /**
          * Can be provided as a child element
         */
        "label"?: string;
        "theme"?: Theme;
    }
    interface LpMultiselectChip {
        "size": ChipSize;
        "theme": Theme;
    }
    interface LpNumberInput {
        "disabled"?: boolean;
        "error"?: boolean;
        "max"?: string | number;
        "min"?: string | number;
        "readOnly"?: boolean;
        "size"?: NumberInputSizes;
        "step"?: string | number;
        "textAlign"?: NumberInputTextAligners;
        "theme"?: Theme;
        "value"?: string | number;
    }
    interface LpRadio {
        "checked": boolean;
        "disabled": boolean;
        "error": boolean;
        /**
          * Can be provided as a child element
         */
        "label": string;
        "labelPosition": RadioLabelPositions;
        "name": string;
        "readOnly": boolean;
        "size": RadioSizes;
        "theme": Theme;
        "value": string;
    }
    interface LpRadioGroup {
        "disabled": boolean;
        "error": boolean;
        "labelPosition": RadioLabelPositions;
        "name": string;
        "readOnly": boolean;
        "selected": string;
        "size": RadioSizes;
        "theme": Theme;
    }
    interface LpSelect {
        "multiple": boolean;
        "search": boolean;
        "theme": Theme;
        "withSelectAll": false | string;
    }
    interface LpSelectOption {
        "hidden": boolean;
        /**
          * Can be provided as a child element
         */
        "label": string;
        "selected": boolean;
        "value": string;
    }
    interface LpSliderInput {
        "disabled": boolean;
        "max": number;
        "min": number;
        "range": boolean;
        "readOnly": boolean;
        "step": number;
        "theme": Theme;
        "value": number | number[];
    }
    interface LpTextInput {
        "disabled": boolean;
        "error": boolean;
        "readOnly": boolean;
        "size": TextInputSizes;
        "textAlign": TextInputTextAligners;
        "theme": Theme;
        "value": string;
    }
    interface LpTextarea {
        "disabled": boolean;
        "error": boolean;
        "readOnly": boolean;
        "resizable": boolean;
        "textAlign": TextareaTextAligners;
        "theme": Theme;
        "value": string;
    }
    interface LpToggle {
        "a11y": boolean;
        "checked": boolean;
        "disabled": boolean;
        /**
          * Can be provided as a child element
         */
        "label": string;
        "labelPosition": ToggleLabelPositions;
        "readOnly": boolean;
        "theme": Theme;
    }
    interface LpToggleButton {
        "checked": boolean;
        /**
          * Can be provided as a child element
         */
        "label": string;
        "size": ToggleButtonSize;
        "theme": Theme;
    }
}
declare global {
    interface HTMLLpButtonElement extends Components.LpButton, HTMLStencilElement {
    }
    var HTMLLpButtonElement: {
        prototype: HTMLLpButtonElement;
        new (): HTMLLpButtonElement;
    };
    interface HTMLLpButtonGroupElement extends Components.LpButtonGroup, HTMLStencilElement {
    }
    var HTMLLpButtonGroupElement: {
        prototype: HTMLLpButtonGroupElement;
        new (): HTMLLpButtonGroupElement;
    };
    interface HTMLLpCheckboxElement extends Components.LpCheckbox, HTMLStencilElement {
    }
    var HTMLLpCheckboxElement: {
        prototype: HTMLLpCheckboxElement;
        new (): HTMLLpCheckboxElement;
    };
    interface HTMLLpChipElement extends Components.LpChip, HTMLStencilElement {
    }
    var HTMLLpChipElement: {
        prototype: HTMLLpChipElement;
        new (): HTMLLpChipElement;
    };
    interface HTMLLpDropdownElement extends Components.LpDropdown, HTMLStencilElement {
    }
    var HTMLLpDropdownElement: {
        prototype: HTMLLpDropdownElement;
        new (): HTMLLpDropdownElement;
    };
    interface HTMLLpFileInputElement extends Components.LpFileInput, HTMLStencilElement {
    }
    var HTMLLpFileInputElement: {
        prototype: HTMLLpFileInputElement;
        new (): HTMLLpFileInputElement;
    };
    interface HTMLLpInputHelperElement extends Components.LpInputHelper, HTMLStencilElement {
    }
    var HTMLLpInputHelperElement: {
        prototype: HTMLLpInputHelperElement;
        new (): HTMLLpInputHelperElement;
    };
    interface HTMLLpInputLabelElement extends Components.LpInputLabel, HTMLStencilElement {
    }
    var HTMLLpInputLabelElement: {
        prototype: HTMLLpInputLabelElement;
        new (): HTMLLpInputLabelElement;
    };
    interface HTMLLpMultiselectChipElement extends Components.LpMultiselectChip, HTMLStencilElement {
    }
    var HTMLLpMultiselectChipElement: {
        prototype: HTMLLpMultiselectChipElement;
        new (): HTMLLpMultiselectChipElement;
    };
    interface HTMLLpNumberInputElement extends Components.LpNumberInput, HTMLStencilElement {
    }
    var HTMLLpNumberInputElement: {
        prototype: HTMLLpNumberInputElement;
        new (): HTMLLpNumberInputElement;
    };
    interface HTMLLpRadioElement extends Components.LpRadio, HTMLStencilElement {
    }
    var HTMLLpRadioElement: {
        prototype: HTMLLpRadioElement;
        new (): HTMLLpRadioElement;
    };
    interface HTMLLpRadioGroupElement extends Components.LpRadioGroup, HTMLStencilElement {
    }
    var HTMLLpRadioGroupElement: {
        prototype: HTMLLpRadioGroupElement;
        new (): HTMLLpRadioGroupElement;
    };
    interface HTMLLpSelectElement extends Components.LpSelect, HTMLStencilElement {
    }
    var HTMLLpSelectElement: {
        prototype: HTMLLpSelectElement;
        new (): HTMLLpSelectElement;
    };
    interface HTMLLpSelectOptionElement extends Components.LpSelectOption, HTMLStencilElement {
    }
    var HTMLLpSelectOptionElement: {
        prototype: HTMLLpSelectOptionElement;
        new (): HTMLLpSelectOptionElement;
    };
    interface HTMLLpSliderInputElement extends Components.LpSliderInput, HTMLStencilElement {
    }
    var HTMLLpSliderInputElement: {
        prototype: HTMLLpSliderInputElement;
        new (): HTMLLpSliderInputElement;
    };
    interface HTMLLpTextInputElement extends Components.LpTextInput, HTMLStencilElement {
    }
    var HTMLLpTextInputElement: {
        prototype: HTMLLpTextInputElement;
        new (): HTMLLpTextInputElement;
    };
    interface HTMLLpTextareaElement extends Components.LpTextarea, HTMLStencilElement {
    }
    var HTMLLpTextareaElement: {
        prototype: HTMLLpTextareaElement;
        new (): HTMLLpTextareaElement;
    };
    interface HTMLLpToggleElement extends Components.LpToggle, HTMLStencilElement {
    }
    var HTMLLpToggleElement: {
        prototype: HTMLLpToggleElement;
        new (): HTMLLpToggleElement;
    };
    interface HTMLLpToggleButtonElement extends Components.LpToggleButton, HTMLStencilElement {
    }
    var HTMLLpToggleButtonElement: {
        prototype: HTMLLpToggleButtonElement;
        new (): HTMLLpToggleButtonElement;
    };
    interface HTMLElementTagNameMap {
        "lp-button": HTMLLpButtonElement;
        "lp-button-group": HTMLLpButtonGroupElement;
        "lp-checkbox": HTMLLpCheckboxElement;
        "lp-chip": HTMLLpChipElement;
        "lp-dropdown": HTMLLpDropdownElement;
        "lp-file-input": HTMLLpFileInputElement;
        "lp-input-helper": HTMLLpInputHelperElement;
        "lp-input-label": HTMLLpInputLabelElement;
        "lp-multiselect-chip": HTMLLpMultiselectChipElement;
        "lp-number-input": HTMLLpNumberInputElement;
        "lp-radio": HTMLLpRadioElement;
        "lp-radio-group": HTMLLpRadioGroupElement;
        "lp-select": HTMLLpSelectElement;
        "lp-select-option": HTMLLpSelectOptionElement;
        "lp-slider-input": HTMLLpSliderInputElement;
        "lp-text-input": HTMLLpTextInputElement;
        "lp-textarea": HTMLLpTextareaElement;
        "lp-toggle": HTMLLpToggleElement;
        "lp-toggle-button": HTMLLpToggleButtonElement;
    }
}
declare namespace LocalJSX {
    interface LpButton {
        /**
          * Can be provided as a child element
         */
        "label"?: string;
        "size"?: ButtonSize;
        "theme"?: Theme;
        "variant"?: ButtonVariant;
    }
    interface LpButtonGroup {
        /**
          * Fires when user clicks on any button inside the group
         */
        "onClick"?: (event: CustomEvent<any>) => void;
        "size"?: ButtonGroupSize;
        "theme"?: Theme;
    }
    interface LpCheckbox {
        "checked"?: boolean;
        "error"?: boolean;
        "indeterminate"?: boolean;
        /**
          * Can be provided as a child element
         */
        "label"?: string;
        "labelPosition"?: CheckboxLabelPositions;
        "onChange"?: (event: CustomEvent<any>) => void;
        "theme"?: Theme;
    }
    interface LpChip {
        /**
          * Can be provided as a child
         */
        "label"?: string | number;
        "onRemove"?: (event: CustomEvent<any>) => void;
        "size"?: ChipSize;
        "theme"?: Theme;
        "value"?: string;
    }
    interface LpDropdown {
        "closeOnBlur"?: boolean;
        "closeOnContentClick"?: boolean;
        "closeOnEscape"?: boolean;
        "contentPlacement"?: DropdownContentPlacements;
        "onClickOutside"?: (event: CustomEvent<any>) => void;
        "onClose"?: (event: CustomEvent<any>) => void;
        "onOpen"?: (event: CustomEvent<any>) => void;
        "open"?: boolean;
        "parentOffset"?: string | number;
        "parentSelector"?: string;
    }
    interface LpFileInput {
        /**
          * Can be provided as a child element
         */
        "buttonLabel"?: string;
        "disabled"?: boolean;
        "error"?: boolean;
        "multiple"?: boolean;
        "readonly"?: boolean;
        "size"?: FileInputSizes;
        "theme"?: Theme;
        "uploading"?: boolean;
        /**
          * Can be provided as a child element
         */
        "uploadingButtonLabel"?: string;
        "uploadingProgress"?: string | number;
    }
    interface LpInputHelper {
        "disabled"?: boolean;
        "error"?: boolean;
        /**
          * Can be provided as a child element
         */
        "text"?: string;
        "theme"?: Theme;
    }
    interface LpInputLabel {
        "info"?: string;
        /**
          * Can be provided as a child element
         */
        "label"?: string;
        "theme"?: Theme;
    }
    interface LpMultiselectChip {
        "size"?: ChipSize;
        "theme"?: Theme;
    }
    interface LpNumberInput {
        "disabled"?: boolean;
        "error"?: boolean;
        "max"?: string | number;
        "min"?: string | number;
        "readOnly"?: boolean;
        "size"?: NumberInputSizes;
        "step"?: string | number;
        "textAlign"?: NumberInputTextAligners;
        "theme"?: Theme;
        "value"?: string | number;
    }
    interface LpRadio {
        "checked"?: boolean;
        "disabled"?: boolean;
        "error"?: boolean;
        /**
          * Can be provided as a child element
         */
        "label"?: string;
        "labelPosition"?: RadioLabelPositions;
        "name": string;
        "onChange"?: (event: CustomEvent<any>) => void;
        "readOnly"?: boolean;
        "size"?: RadioSizes;
        "theme"?: Theme;
        "value": string;
    }
    interface LpRadioGroup {
        "disabled"?: boolean;
        "error"?: boolean;
        "labelPosition"?: RadioLabelPositions;
        "name": string;
        "onChange"?: (event: CustomEvent<any>) => void;
        "readOnly"?: boolean;
        "selected"?: string;
        "size"?: RadioSizes;
        "theme"?: Theme;
    }
    interface LpSelect {
        "multiple"?: boolean;
        "onChange"?: (event: CustomEvent<any>) => void;
        "search"?: boolean;
        "theme"?: Theme;
        "withSelectAll"?: false | string;
    }
    interface LpSelectOption {
        "hidden"?: boolean;
        /**
          * Can be provided as a child element
         */
        "label"?: string;
        "selected"?: boolean;
        "value": string;
    }
    interface LpSliderInput {
        "disabled"?: boolean;
        "max"?: number;
        "min"?: number;
        "onChange"?: (event: CustomEvent<number | number[]>) => void;
        "range"?: boolean;
        "readOnly"?: boolean;
        "step"?: number;
        "theme"?: Theme;
        "value"?: number | number[];
    }
    interface LpTextInput {
        "disabled"?: boolean;
        "error"?: boolean;
        "readOnly"?: boolean;
        "size"?: TextInputSizes;
        "textAlign"?: TextInputTextAligners;
        "theme"?: Theme;
        "value"?: string;
    }
    interface LpTextarea {
        "disabled"?: boolean;
        "error"?: boolean;
        "readOnly"?: boolean;
        "resizable"?: boolean;
        "textAlign"?: TextareaTextAligners;
        "theme"?: Theme;
        "value"?: string;
    }
    interface LpToggle {
        "a11y"?: boolean;
        "checked"?: boolean;
        "disabled"?: boolean;
        /**
          * Can be provided as a child element
         */
        "label"?: string;
        "labelPosition"?: ToggleLabelPositions;
        "readOnly"?: boolean;
        "theme"?: Theme;
    }
    interface LpToggleButton {
        "checked"?: boolean;
        /**
          * Can be provided as a child element
         */
        "label"?: string;
        "size"?: ToggleButtonSize;
        "theme"?: Theme;
    }
    interface IntrinsicElements {
        "lp-button": LpButton;
        "lp-button-group": LpButtonGroup;
        "lp-checkbox": LpCheckbox;
        "lp-chip": LpChip;
        "lp-dropdown": LpDropdown;
        "lp-file-input": LpFileInput;
        "lp-input-helper": LpInputHelper;
        "lp-input-label": LpInputLabel;
        "lp-multiselect-chip": LpMultiselectChip;
        "lp-number-input": LpNumberInput;
        "lp-radio": LpRadio;
        "lp-radio-group": LpRadioGroup;
        "lp-select": LpSelect;
        "lp-select-option": LpSelectOption;
        "lp-slider-input": LpSliderInput;
        "lp-text-input": LpTextInput;
        "lp-textarea": LpTextarea;
        "lp-toggle": LpToggle;
        "lp-toggle-button": LpToggleButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "lp-button": LocalJSX.LpButton & JSXBase.HTMLAttributes<HTMLLpButtonElement>;
            "lp-button-group": LocalJSX.LpButtonGroup & JSXBase.HTMLAttributes<HTMLLpButtonGroupElement>;
            "lp-checkbox": LocalJSX.LpCheckbox & JSXBase.HTMLAttributes<HTMLLpCheckboxElement>;
            "lp-chip": LocalJSX.LpChip & JSXBase.HTMLAttributes<HTMLLpChipElement>;
            "lp-dropdown": LocalJSX.LpDropdown & JSXBase.HTMLAttributes<HTMLLpDropdownElement>;
            "lp-file-input": LocalJSX.LpFileInput & JSXBase.HTMLAttributes<HTMLLpFileInputElement>;
            "lp-input-helper": LocalJSX.LpInputHelper & JSXBase.HTMLAttributes<HTMLLpInputHelperElement>;
            "lp-input-label": LocalJSX.LpInputLabel & JSXBase.HTMLAttributes<HTMLLpInputLabelElement>;
            "lp-multiselect-chip": LocalJSX.LpMultiselectChip & JSXBase.HTMLAttributes<HTMLLpMultiselectChipElement>;
            "lp-number-input": LocalJSX.LpNumberInput & JSXBase.HTMLAttributes<HTMLLpNumberInputElement>;
            "lp-radio": LocalJSX.LpRadio & JSXBase.HTMLAttributes<HTMLLpRadioElement>;
            "lp-radio-group": LocalJSX.LpRadioGroup & JSXBase.HTMLAttributes<HTMLLpRadioGroupElement>;
            "lp-select": LocalJSX.LpSelect & JSXBase.HTMLAttributes<HTMLLpSelectElement>;
            "lp-select-option": LocalJSX.LpSelectOption & JSXBase.HTMLAttributes<HTMLLpSelectOptionElement>;
            "lp-slider-input": LocalJSX.LpSliderInput & JSXBase.HTMLAttributes<HTMLLpSliderInputElement>;
            "lp-text-input": LocalJSX.LpTextInput & JSXBase.HTMLAttributes<HTMLLpTextInputElement>;
            "lp-textarea": LocalJSX.LpTextarea & JSXBase.HTMLAttributes<HTMLLpTextareaElement>;
            "lp-toggle": LocalJSX.LpToggle & JSXBase.HTMLAttributes<HTMLLpToggleElement>;
            "lp-toggle-button": LocalJSX.LpToggleButton & JSXBase.HTMLAttributes<HTMLLpToggleButtonElement>;
        }
    }
}
