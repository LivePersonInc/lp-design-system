@use '~@liveperson-design-system/tokens/scss/border-radius';
@use '~@liveperson-design-system/tokens/scss/spacing';
@use '~@liveperson-design-system/tokens/scss/colors';
@use '~@liveperson-design-system/tokens/scss/colors-light';
@use '~@liveperson-design-system/tokens/scss/transparency';
@use '~@liveperson-design-system/tokens/scss/typography';

@mixin variant-state($state, $theme, $additionalSelector: '') {
  @if $state == default {
    @if $additionalSelector != '' {
      :host(#{$additionalSelector}) {
        @content;
      }
    } @else {
      :host {
        @content;
      }
    }
  } @else if $state == hover {
    :host(#{$additionalSelector}:hover[disabled="false"]) {
      @content;
    }
    :host(#{$additionalSelector}:hover:not([disabled]):not([disabled="true"])) {
      @content;
    }
  } @else if $state == focus {
    :host(#{$additionalSelector}:focus[disabled="false"]) {
      @content;
    }
    :host(#{$additionalSelector}:focus:not([disabled]):not([disabled="true"])) {
      @content;
    }
  } @else if $state == active {
    :host(#{$additionalSelector}:active[disabled="false"]) {
      @content;
    }
    :host(#{$additionalSelector}:active:not([disabled]):not([disabled="true"])) {
      @content;
    }
  } @else if $state == disabled {
    :host(#{$additionalSelector}[disabled]:not([disabled="false"])) {
      @content;
    }
    :host(#{$additionalSelector}[disabled="true"]) {
      @content;
    }
  }
}

@mixin button-variant($variant: primary) {
  $selectors: default hover focus active disabled;

  $variant: if($variant == primary, '', '[variant="#{$variant}"]');

  @each $state in $selectors {
    @include variant-state($state, dark, $variant) {
      @content($state, dark);
    };
  }

  @each $state in $selectors {
    @include variant-state($state, light, '[theme="light"]#{$variant}') {
      @content($state, light);
    };
  }
}

@include button-variant using ($state, $theme) {
  @if $state == default {
    @if $theme == dark {
      box-sizing: border-box;
      display: inline-flex;
      align-items: center;
      height: 32px;
      @include typography.button-label;
      text-align: center;
      color: colors.$primary-text;
      @include border-radius.border-radius;
      background: colors.$primary;
      @include spacing.padding(none, m, true);
      cursor: pointer;
    } @else {
      color: colors-light.$primary-text;
      background: colors-light.$primary;
    }
  } @else if $state == hover {
    background: if($theme == light, colors-light.$primary--hover, colors.$primary--hover);
  } @else if $state == focus {
    @if $theme == dark {
      outline: none;
    }

    background: if($theme == light, colors-light.$primary--hover, colors.$primary--hover);
    box-shadow: if($theme == light, colors-light.$focus-outline, colors.$focus-outline);
  } @else if $state == active {
    background: if($theme == light, colors-light.$primary--active, colors.$primary--active);

    @if $theme == dark {
      box-shadow: none !important;
    }
  } @else if $state == disabled {
    opacity: transparency.$disabled;
    cursor: default;
  }
}

@include button-variant(secondary) using ($state, $theme) {
  @if $state == default {
    color: if($theme == light, colors-light.$secondary-text, colors.$secondary-text);
    background: if($theme == light, colors-light.$secondary, colors.$secondary);
  } @else if $state == hover or $state == focus {
    @if $theme == light {
      color: colors-light.$secondary-text--hover;
      background: colors-light.$secondary--hover;
    } @else {
      background: colors.$secondary--hover;
    }
  } @else if $state == active {
    color: colors.$secondary-text--active;
    background: colors.$secondary--active;
  }
}

@include button-variant(tertiary) using ($state, $theme) {
  @if $state == default {
    color: if($theme == light, colors-light.$tertiary-text, colors.$tertiary-text);
    background: if($theme == light, colors-light.$tertiary, colors.$tertiary);
    box-shadow: inset 0 0 0 2px if($theme == light, colors-light.$tertiary-border, colors.$tertiary-border);
  } @else if $state == hover {
    box-shadow: inset 0 0 0 2px if($theme == light, colors-light.$tertiary-border--hover, colors.$tertiary-border--hover);
  } @else if $state == focus {
    box-shadow:
      inset 0 0 0 2px if($theme == light, colors-light.$tertiary-border--hover, colors.$tertiary-border--hover),
      if($theme == light, colors-light.$focus-outline, colors.$focus-outline);
  } @else if $state == active {
    background: if($theme == light, colors-light.$tertiary-text--active, colors.$tertiary--active);
    color: if($theme == light, colors-light.$tertiary--active, colors.$tertiary-text--active);

    @if $theme == dark {
      box-shadow: none;
    }
  }
}

@include button-variant(destructive) using ($state, $theme) {
  @if $state == default {
    color: if($theme == light, colors-light.$destructive-text, colors.$destructive-text);
    background: if($theme == light, colors-light.$destructive, colors.$destructive);
  } @else if $state == hover or $state == focus {
    background: if($theme == light, colors-light.$destructive--hover, colors.$destructive--hover);
  } @else if $state == active {
    background: if($theme == light, colors-light.$destructive--active, colors.$destructive--active);
  }
}

@include button-variant(ghost) using ($state, $theme) {
  @if $state == default {
    color: if($theme == light, colors-light.$inline-text, colors.$inline-text);
    background: if($theme == light, colors-light.$ghost, colors.$ghost);
  } @else if $state == hover or $state == focus {
    background: if($theme == light, colors-light.$ghost--hover, colors.$ghost--hover);
  } @else if $state == active {
    background: if($theme == light, colors-light.$ghost--active, colors.$ghost--active);
  }
}

@include button-variant(inline) using ($state, $theme) {
  @if $state == default {
    color: if($theme == light, colors-light.$inline-text, colors.$inline-text);

    @if $theme == dark {
      height: auto;
      background: none;
      padding: 2px;
    }
  } @else if $state == hover or $state == focus {
    color: if($theme == light, colors-light.$inline-text--hover, colors.$inline-text--hover);
  } @else if $state == active {
    color: if($theme == light, colors-light.$inline-text--active, colors.$inline-text--active);
  }
}

:host([size="small"]) {
  height: 24px;
  font-size: typography.$size-small;
  @include spacing.padding(none, s, true);

  ::slotted([slot="icon-left"]) {
    margin-right: spacing.get-space(xxs);
  }

  ::slotted([slot="icon-right"]) {
    margin-left: spacing.get-space(xxs);
    margin-right: spacing.get-space(xxs) * -1;
  }
}

:host([size="large"]) {
  height: 40px;
}

@mixin icon {
  display: inline-flex;
}

::slotted([slot="icon-left"]) {
  @include icon;
  margin-left: spacing.get-space(xxs) * -1;
  margin-right: spacing.get-space(xs);
}

::slotted([slot="icon-right"]) {
  @include icon;
  margin-left: spacing.get-space(xs);
  margin-right: spacing.get-space(xxs) * -1;
}
