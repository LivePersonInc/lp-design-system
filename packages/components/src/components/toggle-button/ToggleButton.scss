@use '~@liveperson-design-system/tokens/scss/border-radius';
@use '~@liveperson-design-system/tokens/scss/spacing';
@use '~@liveperson-design-system/tokens/scss/colors';
@use '~@liveperson-design-system/tokens/scss/colors-light';
@use '~@liveperson-design-system/tokens/scss/transparency';
@use '~@liveperson-design-system/tokens/scss/typography';

@mixin variant-state($state, $theme, $additionalSelector: '') {
  @if $state == default {
    @if $additionalSelector != '' {
      :host(#{$additionalSelector}) {
        @content;
      }
    } @else {
      :host {
        @content;
      }
    }
  } @else if $state == hover {
    :host(#{$additionalSelector}:hover[disabled="false"]) {
      @content;
    }
    :host(#{$additionalSelector}:hover:not([disabled]):not([disabled="true"])) {
      @content;
    }
  } @else if $state == focus {
    :host(#{$additionalSelector}:focus[disabled="false"]) {
      @content;
    }
    :host(#{$additionalSelector}:focus:not([disabled]):not([disabled="true"])) {
      @content;
    }
  } @else if $state == active {
    :host(#{$additionalSelector}:active[disabled="false"]) {
      @content;
    }
    :host(#{$additionalSelector}:active:not([disabled]):not([disabled="true"])) {
      @content;
    }
  } @else if $state == disabled {
    :host(#{$additionalSelector}[disabled]:not([disabled="false"])) {
      @content;
    }
    :host(#{$additionalSelector}[disabled="true"]) {
      @content;
    }
  }
}

@mixin button-variant($selected: false) {
  $selectors: default hover focus active disabled;

  $selected: if(
      $selected,
        ('[selected]:not([selected="false"])'),
        ('[selected="false"]', ':not([selected]):not([selected="true"])'),
  );

  @each $state in $selectors {
    @each $s in $selected {
      @include variant-state($state, dark, $s) {
        @content($state, dark);
      }
    ;
    }
  }

  @each $state in $selectors {
    @each $s in $selected {
      @include variant-state($state, light, '[theme="light"]#{$s}') {
        @content($state, light);
      }
    ;
    }
  }
}

:host {
  box-sizing: border-box;
  display: inline-flex;
  align-items: center;
  height: 32px;
  @include typography.button-label(true);
  text-align: center;
  color: colors.$primary-text;
  border: 2px solid colors.$cyan-dark;
  @include border-radius.border-radius(l);
  background: none;
  @include spacing.padding(none, s, true);
  cursor: pointer;
}
:host([theme="light"]) {
  color: colors-light.$blue-dark;
  border-color: colors-light.$blue-light;
}

@include button-variant using($state, $theme) {
  @if $state == hover {
    background: if($theme == dark, rgba(140, 172, 255, .15), rgba(0, 10, 116, .08));
  } @else if $state == focus {
    @if $theme == dark {
      outline: none;
    }

    background: if($theme == dark, rgba(140, 172, 255, .15), rgba(0, 10, 116, .08));
    box-shadow: if($theme == dark, colors.$focus-outline, colors-light.$focus-outline);
  } @else if $state == disabled {
    opacity: transparency.$disabled;
    cursor: default;
  }
}

@include button-variant(true) using($state, $theme) {
  @if $state == default {
    color: if($theme == dark, colors.$navy-dark, colors-light.$navy-white);
    border: none;
    background: if($theme == dark, colors.$cyan-light, colors-light.$blue-dark);
  } @else if $state == hover or $state == focus {
    background: if($theme == dark, colors.$cyan, colors-light.$blue-darker);
  } @else if $state == disabled {
    @if $theme == dark {
      color: colors.$periwinkle-darker;
      opacity: transparency.$disabled;
      cursor: default;
    } @else {
      color: colors-light.$navy-white;
      background: colors-light.$blue;
    }
  }

  @if $state == focus {
    box-shadow: if($theme == dark, colors.$focus-outline, colors-light.$focus-outline);
  }
}

:host([size="small"]) {
  height: 24px;
  @include spacing.padding(none, xs, true);

  ::slotted([slot="icon-left"]) {
    margin-left: 0;
  }

  ::slotted([slot="icon-right"]) {
    margin-right: 0;
  }
}

@mixin icon {
  display: inline-flex;
}

::slotted([slot="icon-left"]) {
  @include icon;
  margin-left: spacing.get-space(xxs) * -1;
  margin-right: spacing.get-space(xxs);
}

::slotted([slot="icon-right"]) {
  @include icon;
  margin-left: spacing.get-space(xxs);
  margin-right: spacing.get-space(xxs) * -1;
}
